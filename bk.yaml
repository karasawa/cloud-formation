AWSTemplateFormatVersion: "2010-09-09"

Description: Amazon Web Services LaunchTemplate & Network & server construction

Parameters:
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: "AWS::EC2::KeyPair::KeyName"
  IP:
    Description: IP address allowed to access EC2
    Type: String

Mappings:
  RegionMap:
    us-east-1:
      HVM64: ami-02f3f602d23f1659d
    us-west-1:
      HVM64: ami-06604eb73be76c003
    eu-west-1:
      HVM64: ami-0779c326801d5a843
    ap-northeast-1:
      HVM64: ami-067871d950411e643
    ap-southeast-1:
      HVM64: ami-0e2e292a9c4fb2f29
  # AzMap:
  #   us-east-1:
  #     primary: us-east-1d
  #     secondary: us-east-1a
  #   us-west-1:
  #     primary: us-west-1a
  #     secondary: us-west-1b
  #   eu-west-1:
  #     primary: eu-west-1a
  #     secondary: eu-west-1b
  #   ap-northeast-1:
  #     primary: ap-northeast-1a
  #     secondary: ap-northeast-1c
  #   ap-southeast-1:
  #     primary: ap-southeast-1a
  #     secondary: ap-southeast-1b

Resources:
# ------------------------------------------------------------#
#  VPC
# ------------------------------------------------------------#
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
      - Key: Name
        Value: MyVpc

# ------------------------------------------------------------#
#  IGW NGW
# ------------------------------------------------------------#
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: MyIgw
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NatGatewayEIP
          - AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: MyNgw
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

# ------------------------------------------------------------#
#  Route Table
# ------------------------------------------------------------#
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: MyPublicRouteTable
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: MyPrivateRouteTable
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

# ------------------------------------------------------------#
#  Public Subnet
# ------------------------------------------------------------#
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      Tags:
      - Key: Name
        Value: MyPublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      Tags:
      - Key: Name
        Value: MyPublicSubnet2
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

# ------------------------------------------------------------#
#  Private Subnet
# ------------------------------------------------------------#
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: 'false'
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      Tags:
      - Key: Name
        Value: MyPrivateSubnet1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: 'false'
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      Tags:
      - Key: Name
        Value: MyPrivateSubnet2
  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

# ------------------------------------------------------------#
#  Public EC2
# ------------------------------------------------------------#
  PublicInstance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeviceIndex: '0'
        SubnetId: !Ref PublicSubnet1
        GroupSet:
        - !Ref PublicSecurityGroup
      UserData: !Base64 |
        #!/bin/bash
        sudo yum -y update
        sudo yum install -y git nginx
        sudo systemctl enable nginx
        sudo systemctl start nginx
      Tags:
      - Key: Name
        Value: MyPublicInstance1
  PublicInstance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeviceIndex: '0'
        SubnetId: !Ref PublicSubnet2
        GroupSet:
        - !Ref PublicSecurityGroup
      UserData: !Base64 |
        #!/bin/bash
        sudo yum -y update
        sudo yum install -y git nginx
        sudo systemctl enable nginx
        sudo systemctl start nginx
      Tags:
      - Key: Name
        Value: MyPublicInstance2
  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: MyPublicSecurityGroup
      GroupDescription: Allow SSH and HTTP access only MyIP
      VpcId: !Ref VPC
      SecurityGroupIngress:
      #http
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref IP
      #ssh
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref IP

# ------------------------------------------------------------#
#  Private EC2
# ------------------------------------------------------------#
  PrivateInstance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'false'
        DeviceIndex: '0'
        SubnetId: !Ref PrivateSubnet1
        GroupSet:
        - !Ref PrivateSecurityGroup
      Tags:
      - Key: Name
        Value: MyPrivateInstance1
  PrivateInstance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'false'
        DeviceIndex: '0'
        SubnetId: !Ref PrivateSubnet2
        GroupSet:
        - !Ref PrivateSecurityGroup
      Tags:
      - Key: Name
        Value: MyPrivateInstance2
  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: MyPrivateSecurityGroup
      GroupDescription: Allow SSH access only MyIP
      VpcId: !Ref VPC
      SecurityGroupIngress:
      #ssh
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref IP

# ------------------------------------------------------------#
#  Target Group
# ------------------------------------------------------------#
  TargetGroup: 
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties: 
      VpcId: !Ref VPC
      # ターゲットにトラフィックをルーティングするために使用するプロトコル
      Protocol: HTTP
      Port: 80
      # ターゲットでヘルスチェックを実行するときにロードバランサーが使用するプロトコル
      HealthCheckProtocol: HTTP
      # ヘルスチェックのターゲットの送信先である
      HealthCheckPath: "/"
      # ターゲットでヘルスチェックを実行するときにロードバランサーが使用するポート
      HealthCheckPort: "traffic-port"
      # 非正常なインスタンスが正常であると見なすまでに必要なヘルスチェックの連続成功回数
      HealthyThresholdCount: 2
      # ターゲットが異常であると見なされるまでに必要なヘルスチェックの連続失敗回数
      UnhealthyThresholdCount: 2
      # ヘルスチェックを失敗と見なす、ターゲットからレスポンスがない時間
      HealthCheckTimeoutSeconds: 5
      # 個々のターゲットのヘルスチェックの概算間隔 
      HealthCheckIntervalSeconds: 10
      # ターゲットからの正常なレスポンスを確認するために使用する HTTP コード
      Matcher: 
        HttpCode: 200
      Tags: 
        - Key: Name
          Value: MyTg
      TargetGroupAttributes:
        # 登録解除するターゲットの状態が draining から unused に変わるのをELBが待機する時間
        - Key: "deregistration_delay.timeout_seconds"
          Value: 300
        # スティッキーセッションが有効かどうか
        - Key: "stickiness.enabled"
          Value: false
        # スティッキーセッションのタイプ
        - Key: "stickiness.type"
          Value: lb_cookie
        # クライアントからのリクエストを同じターゲットにルーティングする必要がある期間
        - Key: "stickiness.lb_cookie.duration_seconds"
          Value: 86400
      Targets: 
        - Id: !Ref PublicInstance1
          Port: 80
        - Id: !Ref PublicInstance2
          Port: 80

# ------------------------------------------------------------#
#  ALB
# ------------------------------------------------------------#
  ALB: 
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties: 
      Tags: 
        - Key: Name
          Value: MyAlb
      # 内部向けかインターネット向け
      Scheme: "internet-facing"
      LoadBalancerAttributes:
        # 削除保護が有効化されているかどうか
        - Key: "deletion_protection.enabled"
          Value: false
          # アイドルタイムアウト値
        - Key: "idle_timeout.timeout_seconds"
          Value: 60
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  ALBListener: 
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties: 
      # デフォルトルールのアクション
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          # ルールアクションタイプ
          # forwardは指定されたターゲットグループにリクエストを転送
          Type: forward
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: MyALBSecurityGroup
      GroupDescription: Allow HTTP access only MyIP
      VpcId: !Ref VPC
      SecurityGroupIngress:
      #http
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref IP

# ------------------------------------------------------------#
# LaunchTemplate
# ------------------------------------------------------------# 
  EC2InstanceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: MyLaunchTemplate
      LaunchTemplateData:
        # リソースの作成時にリソースに適用するタグを指定
        TagSpecifications:
        # ------------------------------------------------------
        # タグ付けするリソースのタイプ。
        # 現在、作成中のタグ付けをサポートするリソースタイプは、instance および volume 
        # ------------------------------------------------------
        - ResourceType: instance
          Tags:
          - Key: Name
            Value: MyInstance
        UserData:
          Fn::Base64: |
            #!/bin/bash
            sudo yum -y update
            sudo yum install -y git nginx
            sudo systemctl enable nginx
            sudo systemctl start nginx
        KeyName: !Ref KeyName
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
        InstanceType: t2.micro
        NetworkInterfaces: 
        # IPv4 アドレスを割り当てるか
        - AssociatePublicIpAddress: 'true'
          # ------------------------------------------------------
          # アタッチの順序におけるネットワークインターフェイスの位置。
          # ネットワークインターフェイスを指定する場合必須
          # ------------------------------------------------------
          DeviceIndex: '0'
          Groups:
            - !Ref PublicSecurityGroup

# ------------------------------------------------------------#
# AutoScaling Group
# ------------------------------------------------------------#    
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: MyAutoscalingGroup
      # 起動させるサブネットを指定
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      # 起動テンプレート
      LaunchTemplate:
        # 起動テンプレートのID
        LaunchTemplateId: !Ref EC2InstanceLaunchTemplate
        # 起動テンプレートのバージョン番号
        Version: !GetAtt EC2InstanceLaunchTemplate.LatestVersionNumber
      # ALBの場合紐づけるTargetGroupを指定する
      TargetGroupARNs:
        - !Ref TargetGroup
      # 台数設定
      DesiredCapacity: 2
      MaxSize: 2
      MinSize: 2
      Tags:
        - Key: Name
          Value: MyAutoScalingInstance
          PropagateAtLaunch: true

Outputs:
  EC2PublicIp1:
    Value: !GetAtt PublicInstance1.PublicIp
    Description: Public IP of EC2 instance
  EC2PublicIp2:
    Value: !GetAtt PublicInstance2.PublicIp
    Description: Public IP of EC2 instance